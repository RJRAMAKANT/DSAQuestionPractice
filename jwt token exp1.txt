<dependencies>
    <!-- Spring Boot Web, Security, and JWT Dependencies -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-security</artifactId>
    </dependency>
    <dependency>
        <groupId>io.jsonwebtoken</groupId>
        <artifactId>jjwt</artifactId>
        <version>0.11.5</version> <!-- Ensure you have the latest version -->
    </dependency>
</dependencies>
2. Create JWT Utility Class
The JwtUtil class will handle JWT token creation and validation.

java
Copy code
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import java.util.Date;

public class JwtUtil {

    private String secretKey = "your_secret_key";  // Use a secure key in production

    // Generate JWT token
    public String generateToken(Long userId, String fullname) {
        return Jwts.builder()
                .setSubject(fullname)
                .claim("userId", userId)  // Store user id as a claim
                .setIssuedAt(new Date())
                .setExpiration(new Date(System.currentTimeMillis() + 1000 * 60 * 60 * 10))  // 10 hours
                .signWith(SignatureAlgorithm.HS256, secretKey)
                .compact();
    }

    // Extract username from JWT token
    public String extractUsername(String token) {
        return Jwts.parser()
                .setSigningKey(secretKey)
                .parseClaimsJws(token)
                .getBody()
                .getSubject();
    }

    // Extract userId from JWT token
    public Long extractUserId(String token) {
        return (Long) Jwts.parser()
                .setSigningKey(secretKey)
                .parseClaimsJws(token)
                .getBody()
                .get("userId");
    }

    // Validate the JWT token
    public boolean validateToken(String token, String fullname) {
        return (fullname.equals(extractUsername(token)) && !isTokenExpired(token));
    }

    // Check if the token is expired
    private boolean isTokenExpired(String token) {
        return extractExpiration(token).before(new Date());
    }

    // Extract expiration date
    public Date extractExpiration(String token) {
        return Jwts.parser()
                .setSigningKey(secretKey)
                .parseClaimsJws(token)
                .getBody()
                .getExpiration();
    }
}
3. User Repository
Create a UserRepository to access the database.

java
Copy code
import org.springframework.data.jpa.repository.JpaRepository;

public interface UserRepository extends JpaRepository<UserEntity, Long> {
    UserEntity findByEmailid(String emailid); // Custom query to fetch user by email
}
4. User Registration Service
In the service layer, we'll handle:

Checking if the email already exists.
Hashing the password before saving the user.
Returning a success message if the user is registered successfully.
java
Copy code
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;

@Service
public class AuthService {

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private BCryptPasswordEncoder passwordEncoder;

    @Autowired
    private JwtUtil jwtUtil;

    // Register User and Encrypt Password
    public String registerUser(String fullname, String emailid, String password, String mobile, String gender, String address) {
        // Check if email already exists
        if (userRepository.findByEmailid(emailid) != null) {
            throw new RuntimeException("Email already exists");
        }

        // Encrypt the password before saving
        String encryptedPassword = passwordEncoder.encode(password);

        // Create new UserEntity object and save to DB
        UserEntity newUser = new UserEntity(fullname, emailid, mobile, gender, encryptedPassword, address);
        userRepository.save(newUser);

        return "User registered successfully!";
    }

    // Login and Generate JWT Token
    public String authenticate(String emailid, String password) {
        UserEntity user = userRepository.findByEmailid(emailid);

        if (user != null && passwordEncoder.matches(password, user.getPassword())) {
            // Password matches, generate JWT token
            return jwtUtil.generateToken(user.getId(), user.getFullname());
        } else {
            throw new RuntimeException("Invalid email or password");
        }
    }
}
5. Authentication Controller
This controller exposes two endpoints:

/auth/register: To register a user.
/auth/login: To authenticate a user and generate a JWT token.
java
Copy code
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/auth")
public class AuthController {

    @Autowired
    private AuthService authService;

    // Register endpoint
    @PostMapping("/register")
    public String register(@RequestParam String fullname,
                           @RequestParam String emailid,
                           @RequestParam String password,
                           @RequestParam String mobile,
                           @RequestParam String gender,
                           @RequestParam String address) {
        return authService.registerUser(fullname, emailid, password, mobile, gender, address);
    }

    // Login endpoint
    @PostMapping("/login")
    public String login(@RequestParam String emailid, @RequestParam String password) {
        return authService.authenticate(emailid, password);
    }
}
6. Security Configuration
Make sure the Spring Security configuration allows users to access the /auth/register and /auth/login endpoints without authentication.

java
Copy code
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;

@Configuration
@EnableWebSecurity
public class SecurityConfig extends WebSecurityConfigurerAdapter {

    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http.csrf().disable()
            .authorizeRequests()
            .antMatchers("/auth/login", "/auth/register").permitAll()  // Allow login and register without authentication
            .anyRequest().authenticated()  // Secure all other endpoints
            .and().addFilter(new JwtAuthenticationFilter(authenticationManager())); // JWT filter
    }
}
7. JWT Authentication Filter
This filter checks for the JWT token in the request headers and validates it.

java
Copy code
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.filter.OncePerRequestFilter;

import javax.servlet.FilterChain;
import javax.servlet.Filter;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServletRequest;
import java.io.IOException;

public class JwtAuthenticationFilter extends OncePerRequestFilter {

    private JwtUtil jwtUtil;

    public JwtAuthenticationFilter(JwtUtil jwtUtil) {
        this.jwtUtil = jwtUtil;
    }

    @Override
    protected void doFilterInternal(HttpServletRequest request, javax.servlet.http.HttpServletResponse response, FilterChain filterChain)
            throws ServletException, IOException {

        String token = request.getHeader("Authorization");

        if (token != null && token.startsWith("Bearer ")) {
            token = token.substring(7); // Remove the "Bearer " prefix

            String username = jwtUtil.extractUsername(token);
            Long userId = jwtUtil.extractUserId(token);
            
            if (username != null) {
                UsernamePasswordAuthenticationToken authenticationToken = new UsernamePasswordAuthenticationToken(
                        username, null, new ArrayList<>());  // Add authorities if needed
                SecurityContextHolder.getContext().setAuthentication(authenticationToken);
            }
        }

        filterChain.doFilter(request, response);
    }
}
8. Frontend (React)
In your React app, after login, you'll need to store the JWT token and extract the id and fullname from the token. Here's an example of how you would implement this:

Login Function (React):
javascript
Copy code
import axios from 'axios';

const login = async (emailid, password) => {
    try {
        const response = await axios.post("http://localhost:8080/auth/login", { emailid, password });
        const token = response.data;  // Store the token in localStorage
        localStorage.setItem('jwtToken', token);
        return decodeJwt(token);  // Decode JWT to get user info (id, fullname)
    } catch (error) {
        console.error("Login failed", error);
        throw error;
    }
};

// Decode JWT and extract user info
const decodeJwt = (token) => {
    const base64Url = token.split('.')[1];
    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
    const jsonPayload = decodeURIComponent(atob(base64).split('').map(function(c) {
        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
    }).join(''));

    return JSON.parse(jsonPayload);
};

// Extract user info from token
const user = decodeJwt(localStorage.getItem('jwtToken'));
console.log("User ID:", user.userId);
console.log("Fullname:", user.fullname);